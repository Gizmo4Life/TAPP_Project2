CollisionImage
	- has some graphics code
		- allows for complete hiding of Shape
			- allows for more-intuitive interface (Shape is handled internally)
			- can keep track of which CollisionLayers contain Shape
			- applying Transformations is slightly easier
	
StellarObject
	- abstract superclass hides maintenance of CollisionImage and GraphicalImage
		- less code repetition
		- idiot-proofing, ease-of-use, readability
	- handles physics directly (does not contain a Physics class, as planned)
		- in short, the Physics class was messy and unnecessary.
		- unclear/awkward delegation of certain tasks (movement AI / Input, HitLayer inclusion/exclusion)
		- messy, circular construction (requires lots of intimate knowledge about the StellarObject itself; necessitated a destroy() method)
		- extraneous mandatory calls to update() and render(); putting these in StellarObject allows for more direct interaction with high-level slick game class (e.g. BasicGame).
